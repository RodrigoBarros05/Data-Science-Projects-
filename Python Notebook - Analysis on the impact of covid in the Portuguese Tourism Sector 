{
 "cells": [
  {
   "cell_type": "raw",
   "id": "41661fc1-fe95-4226-b931-f220d2c9d026",
   "metadata": {},
   "source": [
    "1- Libraries \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "858f914a-07cc-49a8-8405-56d920384b56",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "from mpl_toolkits.mplot3d import Axes3D\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "75eef01d-fab8-44d8-a3e5-e73580bc5aa1",
   "metadata": {},
   "source": [
    "2- IMPORT DATA SETS "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "a415c94b-a24d-44f3-bbd6-5e0abeccb31a",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Load the datasets\n",
    "\n",
    "Reviews_df = pd.read_excel('EuropeTop100Attractions_ENG_20190101_20210821.xlsx',sheet_name= \"Reviews\")\n",
    "Attractions_df=pd.read_excel('EuropeTop100Attractions_ENG_20190101_20210821.xlsx', sheet_name= \"Attractions\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6901fb3b-467a-4124-a290-da24715e1504",
   "metadata": {},
   "source": [
    "2.1. Set Configurations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "id": "459c032d-920b-4762-a6ec-d8fc5e9882e5",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Define colors\n",
    "colors_t = ['#ffd1dc',  # pastel pink\n",
    "            '#aec6cf',  # pastel blue\n",
    "            '#AEEEEE',  # cian pastel blue\n",
    "            '#ffcc99',  # pastel orange\n",
    "            '#987654',  # pastel brown\n",
    "            '#808080',  # gray\n",
    "            \"#FFA500\" ] # light orange\n",
    "\n",
    "#how to use\n",
    "#color=colors)\n",
    "\n",
    "\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "a30a2472-8f58-40cd-acba-0ae4ec7a207c",
   "metadata": {},
   "outputs": [],
   "source": [
    "subPlots_Title_fontSize = 12\n",
    "subPlots_xAxis_fontSize = 10\n",
    "subPlots_yAxis_fontSize = 10\n",
    "subPlots_label_fontSize = 10\n",
    "heatmaps_text_fontSize = 8\n",
    "\n",
    "plots_Title_fontSize = 14\n",
    "plots_Title_textColour = 'black'\n",
    "\n",
    "plots_Legend_fontSize = 12\n",
    "plots_Legend_textColour = 'black'"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8d393e64-8aa6-4870-9386-2fc449c5f9f9",
   "metadata": {},
   "source": [
    "3 Reviews Dataset\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "361c38aa-ba52-48bd-9709-636f728db86f",
   "metadata": {},
   "source": [
    "\n",
    "3.1. Data UnderstandingÂ¶\n",
    "\n",
    "#we will now transform the data from the data set so that we easier to analyze, and to see if we can spot "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "d0c63943-998b-46a5-a01c-12e9a9f05f9a",
   "metadata": {},
   "outputs": [],
   "source": [
    "Rev = Reviews_df.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "f3bcabca-aa44-491b-894b-b7f3d0682405",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(92120, 15)"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Rev.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "175a9d49-dbca-437e-8924-6d6a9849b900",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 92120 entries, 0 to 92119\n",
      "Data columns (total 15 columns):\n",
      " #   Column             Non-Null Count  Dtype         \n",
      "---  ------             --------------  -----         \n",
      " 0   localID            92120 non-null  object        \n",
      " 1   extractionDate     92120 non-null  datetime64[ns]\n",
      " 2   globalRating       92120 non-null  float64       \n",
      " 3   positionOnRanking  92120 non-null  int64         \n",
      " 4   sitesOnRanking     92120 non-null  int64         \n",
      " 5   totalReviews       92120 non-null  int64         \n",
      " 6   userName           92100 non-null  object        \n",
      " 7   userLocation       78651 non-null  object        \n",
      " 8   userContributions  92120 non-null  int64         \n",
      " 9   tripType           63052 non-null  object        \n",
      " 10  reviewWritten      92120 non-null  datetime64[ns]\n",
      " 11  reviewVisited      91410 non-null  datetime64[ns]\n",
      " 12  reviewRating       92120 non-null  int64         \n",
      " 13  reviewLanguage     92120 non-null  object        \n",
      " 14  reviewFullText     92120 non-null  object        \n",
      "dtypes: datetime64[ns](3), float64(1), int64(5), object(6)\n",
      "memory usage: 10.5+ MB\n"
     ]
    }
   ],
   "source": [
    "Rev.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "14657ace-f5b2-4e0d-a379-da9d8c00e0b2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>localID</th>\n",
       "      <th>extractionDate</th>\n",
       "      <th>globalRating</th>\n",
       "      <th>positionOnRanking</th>\n",
       "      <th>sitesOnRanking</th>\n",
       "      <th>totalReviews</th>\n",
       "      <th>userName</th>\n",
       "      <th>userLocation</th>\n",
       "      <th>userContributions</th>\n",
       "      <th>tripType</th>\n",
       "      <th>reviewWritten</th>\n",
       "      <th>reviewVisited</th>\n",
       "      <th>reviewRating</th>\n",
       "      <th>reviewLanguage</th>\n",
       "      <th>reviewFullText</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>MAG001</td>\n",
       "      <td>2021-08-20 08:24:40.077</td>\n",
       "      <td>4.5</td>\n",
       "      <td>1</td>\n",
       "      <td>1186</td>\n",
       "      <td>163828</td>\n",
       "      <td>Maurice M@MauriceM171</td>\n",
       "      <td>Indianapolis, IN</td>\n",
       "      <td>29</td>\n",
       "      <td>Couples</td>\n",
       "      <td>2021-08-18</td>\n",
       "      <td>2021-08-01</td>\n",
       "      <td>5</td>\n",
       "      <td>en</td>\n",
       "      <td>Absolutely breathtaking use of light, an amazi...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>MAG001</td>\n",
       "      <td>2021-08-20 08:24:40.097</td>\n",
       "      <td>4.5</td>\n",
       "      <td>1</td>\n",
       "      <td>1186</td>\n",
       "      <td>163828</td>\n",
       "      <td>nickchamb@nickchamb</td>\n",
       "      <td>Bandon, Ireland</td>\n",
       "      <td>7</td>\n",
       "      <td>Couples</td>\n",
       "      <td>2021-08-17</td>\n",
       "      <td>2021-03-01</td>\n",
       "      <td>5</td>\n",
       "      <td>en</td>\n",
       "      <td>A really interesting and beautiful place to vi...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>MAG001</td>\n",
       "      <td>2021-08-20 08:24:40.117</td>\n",
       "      <td>4.5</td>\n",
       "      <td>1</td>\n",
       "      <td>1186</td>\n",
       "      <td>163828</td>\n",
       "      <td>Arthur Villon@arthur4588</td>\n",
       "      <td>Valencia, Spain</td>\n",
       "      <td>268</td>\n",
       "      <td>Friends</td>\n",
       "      <td>2021-08-16</td>\n",
       "      <td>2021-08-01</td>\n",
       "      <td>5</td>\n",
       "      <td>en</td>\n",
       "      <td>Beautiful place and must visit place in barcel...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>MAG001</td>\n",
       "      <td>2021-08-20 08:24:40.147</td>\n",
       "      <td>4.5</td>\n",
       "      <td>1</td>\n",
       "      <td>1186</td>\n",
       "      <td>163828</td>\n",
       "      <td>James U@696jamesu</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2021-08-16</td>\n",
       "      <td>2021-07-01</td>\n",
       "      <td>5</td>\n",
       "      <td>en</td>\n",
       "      <td>A MUST when visiting Barcelkona.  It is consta...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>MAG001</td>\n",
       "      <td>2021-08-20 08:24:40.159</td>\n",
       "      <td>4.5</td>\n",
       "      <td>1</td>\n",
       "      <td>1186</td>\n",
       "      <td>163828</td>\n",
       "      <td>Kamal K Sirra@Sirra63</td>\n",
       "      <td>Madrid, Spain</td>\n",
       "      <td>516</td>\n",
       "      <td>Family</td>\n",
       "      <td>2021-08-15</td>\n",
       "      <td>2021-07-01</td>\n",
       "      <td>4</td>\n",
       "      <td>en</td>\n",
       "      <td>I visited about 20 years ago and there has bee...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  localID          extractionDate  globalRating  positionOnRanking  \\\n",
       "0  MAG001 2021-08-20 08:24:40.077           4.5                  1   \n",
       "1  MAG001 2021-08-20 08:24:40.097           4.5                  1   \n",
       "2  MAG001 2021-08-20 08:24:40.117           4.5                  1   \n",
       "3  MAG001 2021-08-20 08:24:40.147           4.5                  1   \n",
       "4  MAG001 2021-08-20 08:24:40.159           4.5                  1   \n",
       "\n",
       "   sitesOnRanking  totalReviews                  userName      userLocation  \\\n",
       "0            1186        163828     Maurice M@MauriceM171  Indianapolis, IN   \n",
       "1            1186        163828       nickchamb@nickchamb   Bandon, Ireland   \n",
       "2            1186        163828  Arthur Villon@arthur4588   Valencia, Spain   \n",
       "3            1186        163828         James U@696jamesu               NaN   \n",
       "4            1186        163828     Kamal K Sirra@Sirra63     Madrid, Spain   \n",
       "\n",
       "   userContributions tripType reviewWritten reviewVisited  reviewRating  \\\n",
       "0                 29  Couples    2021-08-18    2021-08-01             5   \n",
       "1                  7  Couples    2021-08-17    2021-03-01             5   \n",
       "2                268  Friends    2021-08-16    2021-08-01             5   \n",
       "3                  7      NaN    2021-08-16    2021-07-01             5   \n",
       "4                516   Family    2021-08-15    2021-07-01             4   \n",
       "\n",
       "  reviewLanguage                                     reviewFullText  \n",
       "0             en  Absolutely breathtaking use of light, an amazi...  \n",
       "1             en  A really interesting and beautiful place to vi...  \n",
       "2             en  Beautiful place and must visit place in barcel...  \n",
       "3             en  A MUST when visiting Barcelkona.  It is consta...  \n",
       "4             en  I visited about 20 years ago and there has bee...  "
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Rev.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "1a583778-4a0b-4121-b23e-4fbaf9b1fe81",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>localID</th>\n",
       "      <th>extractionDate</th>\n",
       "      <th>globalRating</th>\n",
       "      <th>positionOnRanking</th>\n",
       "      <th>sitesOnRanking</th>\n",
       "      <th>totalReviews</th>\n",
       "      <th>userName</th>\n",
       "      <th>userLocation</th>\n",
       "      <th>userContributions</th>\n",
       "      <th>tripType</th>\n",
       "      <th>reviewWritten</th>\n",
       "      <th>reviewVisited</th>\n",
       "      <th>reviewRating</th>\n",
       "      <th>reviewLanguage</th>\n",
       "      <th>reviewFullText</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>92115</th>\n",
       "      <td>MAG100</td>\n",
       "      <td>2021-08-21 16:27:11.795</td>\n",
       "      <td>4.5</td>\n",
       "      <td>11</td>\n",
       "      <td>677</td>\n",
       "      <td>5179</td>\n",
       "      <td>David M@DTM56</td>\n",
       "      <td>Cambridge, UK</td>\n",
       "      <td>2055</td>\n",
       "      <td>Couples</td>\n",
       "      <td>2019-03-04</td>\n",
       "      <td>2019-02-01</td>\n",
       "      <td>5</td>\n",
       "      <td>en</td>\n",
       "      <td>A lovely old rambling centre with no logical l...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>92116</th>\n",
       "      <td>MAG100</td>\n",
       "      <td>2021-08-21 16:27:11.893</td>\n",
       "      <td>4.5</td>\n",
       "      <td>11</td>\n",
       "      <td>677</td>\n",
       "      <td>5179</td>\n",
       "      <td>robert_bos53@robert_bos53</td>\n",
       "      <td>Geneva, Switzerland</td>\n",
       "      <td>1802</td>\n",
       "      <td>Friends</td>\n",
       "      <td>2019-02-25</td>\n",
       "      <td>2019-02-01</td>\n",
       "      <td>5</td>\n",
       "      <td>en</td>\n",
       "      <td>A one day visit from Rome in February: the his...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>92117</th>\n",
       "      <td>MAG100</td>\n",
       "      <td>2021-08-21 16:27:11.993</td>\n",
       "      <td>4.5</td>\n",
       "      <td>11</td>\n",
       "      <td>677</td>\n",
       "      <td>5179</td>\n",
       "      <td>Mmarymomm@Mmarymomm</td>\n",
       "      <td>Pleasanton, CA</td>\n",
       "      <td>1738</td>\n",
       "      <td>Couples</td>\n",
       "      <td>2019-02-14</td>\n",
       "      <td>2018-12-01</td>\n",
       "      <td>5</td>\n",
       "      <td>en</td>\n",
       "      <td>Is there a more beautiful, historical, and art...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>92118</th>\n",
       "      <td>MAG100</td>\n",
       "      <td>2021-08-21 16:27:12.086</td>\n",
       "      <td>4.5</td>\n",
       "      <td>11</td>\n",
       "      <td>677</td>\n",
       "      <td>5179</td>\n",
       "      <td>KateJourney@KateJourney</td>\n",
       "      <td>Exeter, Canada</td>\n",
       "      <td>185</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2019-02-12</td>\n",
       "      <td>2018-11-01</td>\n",
       "      <td>4</td>\n",
       "      <td>en</td>\n",
       "      <td>It is an ironic twist to see all of the modern...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>92119</th>\n",
       "      <td>MAG100</td>\n",
       "      <td>2021-08-21 16:27:17.026</td>\n",
       "      <td>4.5</td>\n",
       "      <td>11</td>\n",
       "      <td>677</td>\n",
       "      <td>5179</td>\n",
       "      <td>czlido@czlido</td>\n",
       "      <td>Cape Cod, MA</td>\n",
       "      <td>14</td>\n",
       "      <td>Solo</td>\n",
       "      <td>2019-01-16</td>\n",
       "      <td>2018-12-01</td>\n",
       "      <td>5</td>\n",
       "      <td>en</td>\n",
       "      <td>The area around Lungarno Vespucci, better know...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      localID          extractionDate  globalRating  positionOnRanking  \\\n",
       "92115  MAG100 2021-08-21 16:27:11.795           4.5                 11   \n",
       "92116  MAG100 2021-08-21 16:27:11.893           4.5                 11   \n",
       "92117  MAG100 2021-08-21 16:27:11.993           4.5                 11   \n",
       "92118  MAG100 2021-08-21 16:27:12.086           4.5                 11   \n",
       "92119  MAG100 2021-08-21 16:27:17.026           4.5                 11   \n",
       "\n",
       "       sitesOnRanking  totalReviews                   userName  \\\n",
       "92115             677          5179              David M@DTM56   \n",
       "92116             677          5179  robert_bos53@robert_bos53   \n",
       "92117             677          5179        Mmarymomm@Mmarymomm   \n",
       "92118             677          5179    KateJourney@KateJourney   \n",
       "92119             677          5179              czlido@czlido   \n",
       "\n",
       "              userLocation  userContributions tripType reviewWritten  \\\n",
       "92115        Cambridge, UK               2055  Couples    2019-03-04   \n",
       "92116  Geneva, Switzerland               1802  Friends    2019-02-25   \n",
       "92117       Pleasanton, CA               1738  Couples    2019-02-14   \n",
       "92118       Exeter, Canada                185      NaN    2019-02-12   \n",
       "92119         Cape Cod, MA                 14     Solo    2019-01-16   \n",
       "\n",
       "      reviewVisited  reviewRating reviewLanguage  \\\n",
       "92115    2019-02-01             5             en   \n",
       "92116    2019-02-01             5             en   \n",
       "92117    2018-12-01             5             en   \n",
       "92118    2018-11-01             4             en   \n",
       "92119    2018-12-01             5             en   \n",
       "\n",
       "                                          reviewFullText  \n",
       "92115  A lovely old rambling centre with no logical l...  \n",
       "92116  A one day visit from Rome in February: the his...  \n",
       "92117  Is there a more beautiful, historical, and art...  \n",
       "92118  It is an ironic twist to see all of the modern...  \n",
       "92119  The area around Lungarno Vespucci, better know...  "
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Rev.tail(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "86b77786-23c8-4c84-8ab1-1c7ed613b8cf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>unique</th>\n",
       "      <th>top</th>\n",
       "      <th>freq</th>\n",
       "      <th>mean</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "      <th>std</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>localID</th>\n",
       "      <td>92120</td>\n",
       "      <td>100</td>\n",
       "      <td>MAG001</td>\n",
       "      <td>8309</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>extractionDate</th>\n",
       "      <td>92120</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2021-08-20 22:09:20.598932992</td>\n",
       "      <td>2021-08-20 08:24:40.077000</td>\n",
       "      <td>2021-08-20 12:08:10.831000064</td>\n",
       "      <td>2021-08-20 15:46:58.171000064</td>\n",
       "      <td>2021-08-21 12:35:39.817250048</td>\n",
       "      <td>2021-08-21 16:27:17.026000</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>globalRating</th>\n",
       "      <td>92120.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.485166</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.5</td>\n",
       "      <td>4.5</td>\n",
       "      <td>4.5</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.178085</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>positionOnRanking</th>\n",
       "      <td>92120.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.91459</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>55.0</td>\n",
       "      <td>4.843013</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>sitesOnRanking</th>\n",
       "      <td>92120.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>748.263537</td>\n",
       "      <td>5.0</td>\n",
       "      <td>154.0</td>\n",
       "      <td>484.0</td>\n",
       "      <td>1186.0</td>\n",
       "      <td>3837.0</td>\n",
       "      <td>802.742304</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>totalReviews</th>\n",
       "      <td>92120.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>40556.601813</td>\n",
       "      <td>5179.0</td>\n",
       "      <td>14152.0</td>\n",
       "      <td>24454.0</td>\n",
       "      <td>51324.0</td>\n",
       "      <td>163828.0</td>\n",
       "      <td>42914.381014</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>userName</th>\n",
       "      <td>92100</td>\n",
       "      <td>65785</td>\n",
       "      <td>Malgorzata@Margo7850p</td>\n",
       "      <td>31</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>userLocation</th>\n",
       "      <td>78651</td>\n",
       "      <td>12612</td>\n",
       "      <td>London, UK</td>\n",
       "      <td>3710</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>userContributions</th>\n",
       "      <td>92120.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>477.52056</td>\n",
       "      <td>0.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>66.0</td>\n",
       "      <td>215.0</td>\n",
       "      <td>607732.0</td>\n",
       "      <td>7270.518677</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>tripType</th>\n",
       "      <td>63052</td>\n",
       "      <td>5</td>\n",
       "      <td>Couples</td>\n",
       "      <td>31702</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>reviewWritten</th>\n",
       "      <td>92120</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2019-09-02 16:05:57.967868160</td>\n",
       "      <td>2019-01-01 00:00:00</td>\n",
       "      <td>2019-05-11 00:00:00</td>\n",
       "      <td>2019-08-07 00:00:00</td>\n",
       "      <td>2019-11-05 00:00:00</td>\n",
       "      <td>2021-08-21 00:00:00</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>reviewVisited</th>\n",
       "      <td>91410</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2019-07-19 02:09:01.122415104</td>\n",
       "      <td>2015-10-01 00:00:00</td>\n",
       "      <td>2019-04-01 00:00:00</td>\n",
       "      <td>2019-07-01 00:00:00</td>\n",
       "      <td>2019-10-01 00:00:00</td>\n",
       "      <td>2021-08-01 00:00:00</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>reviewRating</th>\n",
       "      <td>92120.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.578658</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.792693</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>reviewLanguage</th>\n",
       "      <td>92120</td>\n",
       "      <td>1</td>\n",
       "      <td>en</td>\n",
       "      <td>92120</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>reviewFullText</th>\n",
       "      <td>92120</td>\n",
       "      <td>85088</td>\n",
       "      <td>Is a nice place to visit when you visit Barcel...</td>\n",
       "      <td>3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     count unique  \\\n",
       "localID              92120    100   \n",
       "extractionDate       92120    NaN   \n",
       "globalRating       92120.0    NaN   \n",
       "positionOnRanking  92120.0    NaN   \n",
       "sitesOnRanking     92120.0    NaN   \n",
       "totalReviews       92120.0    NaN   \n",
       "userName             92100  65785   \n",
       "userLocation         78651  12612   \n",
       "userContributions  92120.0    NaN   \n",
       "tripType             63052      5   \n",
       "reviewWritten        92120    NaN   \n",
       "reviewVisited        91410    NaN   \n",
       "reviewRating       92120.0    NaN   \n",
       "reviewLanguage       92120      1   \n",
       "reviewFullText       92120  85088   \n",
       "\n",
       "                                                                 top   freq  \\\n",
       "localID                                                       MAG001   8309   \n",
       "extractionDate                                                   NaN    NaN   \n",
       "globalRating                                                     NaN    NaN   \n",
       "positionOnRanking                                                NaN    NaN   \n",
       "sitesOnRanking                                                   NaN    NaN   \n",
       "totalReviews                                                     NaN    NaN   \n",
       "userName                                       Malgorzata@Margo7850p     31   \n",
       "userLocation                                              London, UK   3710   \n",
       "userContributions                                                NaN    NaN   \n",
       "tripType                                                     Couples  31702   \n",
       "reviewWritten                                                    NaN    NaN   \n",
       "reviewVisited                                                    NaN    NaN   \n",
       "reviewRating                                                     NaN    NaN   \n",
       "reviewLanguage                                                    en  92120   \n",
       "reviewFullText     Is a nice place to visit when you visit Barcel...      3   \n",
       "\n",
       "                                            mean                         min  \\\n",
       "localID                                      NaN                         NaN   \n",
       "extractionDate     2021-08-20 22:09:20.598932992  2021-08-20 08:24:40.077000   \n",
       "globalRating                            4.485166                         4.0   \n",
       "positionOnRanking                        3.91459                         1.0   \n",
       "sitesOnRanking                        748.263537                         5.0   \n",
       "totalReviews                        40556.601813                      5179.0   \n",
       "userName                                     NaN                         NaN   \n",
       "userLocation                                 NaN                         NaN   \n",
       "userContributions                      477.52056                         0.0   \n",
       "tripType                                     NaN                         NaN   \n",
       "reviewWritten      2019-09-02 16:05:57.967868160         2019-01-01 00:00:00   \n",
       "reviewVisited      2019-07-19 02:09:01.122415104         2015-10-01 00:00:00   \n",
       "reviewRating                            4.578658                         1.0   \n",
       "reviewLanguage                               NaN                         NaN   \n",
       "reviewFullText                               NaN                         NaN   \n",
       "\n",
       "                                             25%  \\\n",
       "localID                                      NaN   \n",
       "extractionDate     2021-08-20 12:08:10.831000064   \n",
       "globalRating                                 4.5   \n",
       "positionOnRanking                            1.0   \n",
       "sitesOnRanking                             154.0   \n",
       "totalReviews                             14152.0   \n",
       "userName                                     NaN   \n",
       "userLocation                                 NaN   \n",
       "userContributions                           20.0   \n",
       "tripType                                     NaN   \n",
       "reviewWritten                2019-05-11 00:00:00   \n",
       "reviewVisited                2019-04-01 00:00:00   \n",
       "reviewRating                                 4.0   \n",
       "reviewLanguage                               NaN   \n",
       "reviewFullText                               NaN   \n",
       "\n",
       "                                             50%  \\\n",
       "localID                                      NaN   \n",
       "extractionDate     2021-08-20 15:46:58.171000064   \n",
       "globalRating                                 4.5   \n",
       "positionOnRanking                            2.0   \n",
       "sitesOnRanking                             484.0   \n",
       "totalReviews                             24454.0   \n",
       "userName                                     NaN   \n",
       "userLocation                                 NaN   \n",
       "userContributions                           66.0   \n",
       "tripType                                     NaN   \n",
       "reviewWritten                2019-08-07 00:00:00   \n",
       "reviewVisited                2019-07-01 00:00:00   \n",
       "reviewRating                                 5.0   \n",
       "reviewLanguage                               NaN   \n",
       "reviewFullText                               NaN   \n",
       "\n",
       "                                             75%                         max  \\\n",
       "localID                                      NaN                         NaN   \n",
       "extractionDate     2021-08-21 12:35:39.817250048  2021-08-21 16:27:17.026000   \n",
       "globalRating                                 4.5                         5.0   \n",
       "positionOnRanking                            6.0                        55.0   \n",
       "sitesOnRanking                            1186.0                      3837.0   \n",
       "totalReviews                             51324.0                    163828.0   \n",
       "userName                                     NaN                         NaN   \n",
       "userLocation                                 NaN                         NaN   \n",
       "userContributions                          215.0                    607732.0   \n",
       "tripType                                     NaN                         NaN   \n",
       "reviewWritten                2019-11-05 00:00:00         2021-08-21 00:00:00   \n",
       "reviewVisited                2019-10-01 00:00:00         2021-08-01 00:00:00   \n",
       "reviewRating                                 5.0                         5.0   \n",
       "reviewLanguage                               NaN                         NaN   \n",
       "reviewFullText                               NaN                         NaN   \n",
       "\n",
       "                            std  \n",
       "localID                     NaN  \n",
       "extractionDate              NaN  \n",
       "globalRating           0.178085  \n",
       "positionOnRanking      4.843013  \n",
       "sitesOnRanking       802.742304  \n",
       "totalReviews       42914.381014  \n",
       "userName                    NaN  \n",
       "userLocation                NaN  \n",
       "userContributions   7270.518677  \n",
       "tripType                    NaN  \n",
       "reviewWritten               NaN  \n",
       "reviewVisited               NaN  \n",
       "reviewRating           0.792693  \n",
       "reviewLanguage              NaN  \n",
       "reviewFullText              NaN  "
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    " Rev.describe(include='all').T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "e6eedf73-aea1-4623-ad12-56a6ab38ada2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "reviewVisited\n",
       "2019-09-01    8497\n",
       "2019-05-01    8466\n",
       "2019-06-01    7962\n",
       "2019-07-01    7736\n",
       "2019-08-01    7448\n",
       "2019-10-01    6964\n",
       "2019-04-01    6660\n",
       "2019-03-01    5381\n",
       "2019-02-01    3764\n",
       "2019-12-01    3626\n",
       "2019-11-01    3599\n",
       "2019-01-01    3313\n",
       "2020-02-01    2652\n",
       "2020-01-01    2387\n",
       "2018-12-01    1884\n",
       "2020-03-01    1188\n",
       "2020-08-01    1079\n",
       "2020-09-01     983\n",
       "2018-09-01     746\n",
       "2018-10-01     736\n",
       "2018-11-01     689\n",
       "2020-10-01     589\n",
       "2021-07-01     571\n",
       "2020-07-01     554\n",
       "2021-06-01     512\n",
       "2021-08-01     508\n",
       "2018-08-01     500\n",
       "2018-07-01     408\n",
       "2018-06-01     401\n",
       "2018-05-01     326\n",
       "2021-05-01     275\n",
       "2018-04-01     189\n",
       "2018-03-01     133\n",
       "2020-06-01     119\n",
       "2020-12-01     116\n",
       "2021-04-01      94\n",
       "2020-11-01      77\n",
       "2018-02-01      68\n",
       "2020-05-01      42\n",
       "2021-01-01      42\n",
       "2020-04-01      40\n",
       "2021-03-01      36\n",
       "2021-02-01      26\n",
       "2017-04-01       4\n",
       "2017-07-01       3\n",
       "2017-03-01       2\n",
       "2017-11-01       2\n",
       "2017-06-01       2\n",
       "2017-09-01       2\n",
       "2017-08-01       2\n",
       "2017-10-01       1\n",
       "2018-01-01       1\n",
       "2017-02-01       1\n",
       "2016-12-01       1\n",
       "2015-10-01       1\n",
       "2017-05-01       1\n",
       "2017-12-01       1\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Rev['reviewVisited'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "892b8d0a-d542-464c-b60c-d0a3f7fee035",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "reviewRating\n",
       "5    65471\n",
       "4    18688\n",
       "3     5100\n",
       "2     1518\n",
       "1     1343\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Rev['reviewRating'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "f2644754-5f31-4b95-9540-2d7d52698553",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "sitesOnRanking\n",
       "1186    14785\n",
       "2383     7463\n",
       "487      6874\n",
       "188      3789\n",
       "861      3640\n",
       "        ...  \n",
       "320       133\n",
       "108       113\n",
       "75         97\n",
       "58         81\n",
       "677        51\n",
       "Name: count, Length: 70, dtype: int64"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Rev['sitesOnRanking'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "c31da8b1-36e3-47aa-8334-21afe1a05f36",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "userContributions\n",
       "3       1710\n",
       "4       1659\n",
       "5       1620\n",
       "2       1543\n",
       "6       1491\n",
       "        ... \n",
       "1062       1\n",
       "1210       1\n",
       "2044       1\n",
       "5356       1\n",
       "8695       1\n",
       "Name: count, Length: 2535, dtype: int64"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Rev['userContributions'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "2db1091a-e6e1-49f6-aa0c-5735a74ffff2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "positionOnRanking\n",
       "1     38547\n",
       "2     12821\n",
       "3     11549\n",
       "7      7026\n",
       "8      5668\n",
       "11     2885\n",
       "4      2834\n",
       "10     2362\n",
       "6      2282\n",
       "5      2223\n",
       "12     1097\n",
       "24      806\n",
       "9       710\n",
       "31      595\n",
       "16      312\n",
       "19      243\n",
       "55      160\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Rev['positionOnRanking'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "da724bac-1a4a-47ba-a1e4-0e966ca0d403",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "globalRating\n",
       "4.5    80353\n",
       "4.0     7250\n",
       "5.0     4517\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Rev['globalRating'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "16bb3e2b-4cf8-44de-9796-81040c5d074a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "localID               0.00\n",
       "extractionDate        0.00\n",
       "globalRating          0.00\n",
       "positionOnRanking     0.00\n",
       "sitesOnRanking        0.00\n",
       "totalReviews          0.00\n",
       "userName              0.02\n",
       "userLocation         14.62\n",
       "userContributions     0.00\n",
       "tripType             31.55\n",
       "reviewWritten         0.00\n",
       "reviewVisited         0.77\n",
       "reviewRating          0.00\n",
       "reviewLanguage        0.00\n",
       "reviewFullText        0.00\n",
       "dtype: float64"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "round(Rev.isna().sum()/Rev.shape[0]*100,2)"
   ]
  },
  {
   "cell_type": "raw",
   "id": "f6045f6c-0b9d-41a9-a399-4e6ad90384ab",
   "metadata": {},
   "source": [
    "4.2. Data Preparation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "5ec154d1-3f1f-47a2-9232-96db67e0cfd4",
   "metadata": {},
   "outputs": [],
   "source": [
    "Rev.rename(columns={\"localID\": \"LocalID\"}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "f6541f08-9b24-4304-959b-3734606a4dff",
   "metadata": {},
   "outputs": [],
   "source": [
    "# We will now add a new column 'ReviewsID' to the DataFrame and set it as the index\n",
    "Rev['ReviewsID'] = range(1, len(Rev) + 1)\n",
    "Rev.set_index('ReviewsID', inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "id": "b1358214-f932-4cc2-8e59-e8c30dabdb36",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tripType\n",
       "Couples     31440\n",
       "Unknown     28006\n",
       "Family      13538\n",
       "Friends     11601\n",
       "Solo         5034\n",
       "Business      854\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 115,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# As noted earlier, the variables with the most missing values are userLocation and tripType.\n",
    "# We'll replace the missing values with \"Unknown\" to ensure these rows remain usable for future analysis.\n",
    "Rev['tripType'] = Rev['tripType'].fillna('Unknown')\n",
    "Rev['tripType'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "72ca24f2-7175-4527-987c-9560cbfd5009",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "userLocation\n",
       "Unknown                    13469\n",
       "London, UK                  3710\n",
       "Melbourne, Australia         773\n",
       "Sydney, Australia            736\n",
       "New York City, NY            699\n",
       "                           ...  \n",
       "Wallaroo, Australia            1\n",
       "Teresopolis, RJ                1\n",
       "Pittsworth, Australia          1\n",
       "Scone, Australia               1\n",
       "Elburg, The Netherlands        1\n",
       "Name: count, Length: 12613, dtype: int64"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Rev['userLocation'] = Rev['userLocation'].fillna('Unknown')\n",
    "Rev['userLocation'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "8ece54e2-555e-45b6-9d6c-015e7e1b1893",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LocalID              0.00\n",
       "extractionDate       0.00\n",
       "globalRating         0.00\n",
       "positionOnRanking    0.00\n",
       "sitesOnRanking       0.00\n",
       "totalReviews         0.00\n",
       "userName             0.02\n",
       "userLocation         0.00\n",
       "userContributions    0.00\n",
       "tripType             0.00\n",
       "reviewWritten        0.00\n",
       "reviewVisited        0.77\n",
       "reviewRating         0.00\n",
       "reviewLanguage       0.00\n",
       "reviewFullText       0.00\n",
       "dtype: float64"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Checking on missing values again\n",
    "round(Rev.isna().sum()/Rev.shape[0]*100,2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "id": "c8114c3a-e703-40c9-95c5-399251ea3c70",
   "metadata": {},
   "outputs": [],
   "source": [
    "# The total percentage of missing values is 0.79%, coming from reviewVisited and userName.\n",
    "# We'll remove these rows as their low impact does not significantly affect the analysis.\n",
    "\n",
    "Rev = Rev.dropna(subset=['reviewVisited'])\n",
    "Rev = Rev.dropna(subset=['userName'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "8f5db892-64d4-46f8-8050-60db48f71e3b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "reviewVisited\n",
       "2019-09-01    8497\n",
       "2019-05-01    8466\n",
       "2019-06-01    7962\n",
       "2019-07-01    7736\n",
       "2019-08-01    7448\n",
       "2019-10-01    6964\n",
       "2019-04-01    6660\n",
       "2019-03-01    5381\n",
       "2019-02-01    3764\n",
       "2019-12-01    3626\n",
       "2019-11-01    3599\n",
       "2019-01-01    3313\n",
       "2020-02-01    2652\n",
       "2020-01-01    2387\n",
       "2018-12-01    1884\n",
       "2020-03-01    1188\n",
       "2020-08-01    1079\n",
       "2020-09-01     983\n",
       "2018-09-01     746\n",
       "2018-10-01     736\n",
       "2018-11-01     689\n",
       "2020-10-01     589\n",
       "2021-07-01     571\n",
       "2020-07-01     554\n",
       "2021-06-01     512\n",
       "2021-08-01     508\n",
       "2018-08-01     500\n",
       "2018-07-01     408\n",
       "2018-06-01     401\n",
       "2018-05-01     326\n",
       "2021-05-01     275\n",
       "2018-04-01     189\n",
       "2018-03-01     133\n",
       "2020-06-01     119\n",
       "2020-12-01     116\n",
       "2021-04-01      94\n",
       "2020-11-01      77\n",
       "2018-02-01      68\n",
       "2020-05-01      42\n",
       "2021-01-01      42\n",
       "2020-04-01      40\n",
       "2021-03-01      36\n",
       "2021-02-01      26\n",
       "2017-04-01       4\n",
       "2017-07-01       3\n",
       "2017-06-01       2\n",
       "2017-08-01       2\n",
       "2017-09-01       2\n",
       "2017-11-01       2\n",
       "2017-03-01       2\n",
       "2017-05-01       1\n",
       "2017-10-01       1\n",
       "2017-02-01       1\n",
       "2018-01-01       1\n",
       "2017-12-01       1\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Since our main data analysis dates are from 2017 untill 2021, we'll eliminate the variables where reviewVisited presents dates from 2015 and 2016\n",
    "Rev = Rev[~Rev['reviewVisited'].dt.year.isin([2015, 2016])]\n",
    "Rev [\"reviewVisited\"].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "dabaa74d-6318-414d-be10-8e73913144bf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LocalID\n",
       "MAG001    8257\n",
       "MAG003    5519\n",
       "u         4909\n",
       "MAG024    2866\n",
       "MAG002    2833\n",
       "          ... \n",
       "MAG068      86\n",
       "MAG098      81\n",
       "MAG094      73\n",
       "MAG099      60\n",
       "MAG100      51\n",
       "Name: count, Length: 100, dtype: int64"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Checking inconsistencies\n",
    "Rev['LocalID'].value_counts()\n",
    "#We encountered 'u' and 'genis'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "id": "3e35f814-80f4-4a22-80ba-52e048a9e3e2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "LocalID                   0\n",
      "extractionDate            0\n",
      "globalRating              0\n",
      "positionOnRanking         0\n",
      "sitesOnRanking            0\n",
      "totalReviews              0\n",
      "userName                  0\n",
      "userLocation              0\n",
      "userContributions         0\n",
      "tripType                  0\n",
      "reviewWritten             0\n",
      "reviewVisited             0\n",
      "reviewRating              0\n",
      "reviewLanguage            0\n",
      "reviewFullText            0\n",
      "is_review_before_visit    0\n",
      "userCountry               0\n",
      "spring                    0\n",
      "summer                    0\n",
      "autumn                    0\n",
      "winter                    0\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "#We'll check if there are rows where the review was written before the visit\n",
    "\n",
    "# Add a new column 'is_review_before_visit' to indicate whether 'reviewWritten' occurs before 'reviewVisited'.\n",
    "# If 'reviewWritten' is earlier, set the value to True; otherwise, set it to False.\n",
    "Rev['is_review_before_visit'] = Rev['reviewWritten'] < Rev['reviewVisited']\n",
    "\n",
    "#Display rows where 'reviewWritten' is earlier than 'reviewVisited'\n",
    "rows_with_review_before_visit = Rev[Rev['is_review_before_visit']]\n",
    "\n",
    "#We will now inspect the rows\n",
    "print(rows_with_review_before_visit.count())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "68e0d5ea-d8df-4536-bdc2-28ca628716dd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 900x300 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Check for Outliers\n",
    "columns_to_plot = ['userContributions', 'positionOnRanking', 'sitesOnRanking']\n",
    "\n",
    "#Create a figure and axes with a loop\n",
    "fig, ax = plt.subplots(nrows=1, ncols=len(columns_to_plot), figsize=(9, 3))\n",
    "\n",
    "#Loop through each column and create a boxplot\n",
    "for i, column in enumerate(columns_to_plot):\n",
    "    sns.boxplot(data=Rev, x=column, ax=ax[i], color='#ffcc99')\n",
    "    ax[i].set_title(f'Boxplot of {column}', fontsize=8)\n",
    "    ax[i].set_xlabel('')  #Remove the x-axis label\n",
    "\n",
    "plt.tight_layout() \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "d7ca06d0-e050-4132-a66e-4eb83c103fbb",
   "metadata": {},
   "outputs": [],
   "source": [
    "# To handle outliers, we'll create a copy of the dataset for modifications while preserving the original dataset for reference.\n",
    "Rev1=Rev.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "id": "516d05f3-1f7d-4a04-adb3-1f73a7fb512d",
   "metadata": {},
   "outputs": [],
   "source": [
    "def removeOutliers(Rev, colList, lowPercentile=0.05, highPercentile=0.95, verbose=False):\n",
    "    \"\"\"\n",
    "    Remove rows with outliers below or above the predefined percentile thresholds.\n",
    "\n",
    "    Args:\n",
    "        Reviews (pd.DataFrame): DataFrame object containing the data.\n",
    "        colList (list): List of column names to check for outliers.\n",
    "        lowPercentile (float, optional): Rows with values below this threshold will be removed. Defaults to 0.05.\n",
    "        highPercentile (float, optional): Rows with values above this threshold will be removed. Defaults to 0.95.\n",
    "        verbose (bool, optional): Whether to print feedback on the percentiles. Defaults to False.\n",
    "\n",
    "    Returns:\n",
    "        pd.DataFrame: The DataFrame with rows removed based on the thresholds.\n",
    "    \"\"\"\n",
    "    #Identify percentiles\n",
    "    quant_Rev = Rev[colList].quantile([lowPercentile, highPercentile])\n",
    "    if verbose:\n",
    "        print(quant_Rev)\n",
    "\n",
    "    #Loop in each column\n",
    "    for name in list(Rev[colList].columns):\n",
    "\n",
    "        #Keep only rows that are inside the limits\n",
    "        Rev = Rev[(Rev[name] >= quant_Rev.loc[lowPercentile, name]) & (Rev[name] <= quant_Rev.loc[highPercentile, name])]\n",
    "\n",
    "    return Rev"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "e1900c4e-d2cc-4664-a295-2cc084454cc5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      userContributions\n",
      "0.00                0.0\n",
      "0.99             5074.0\n"
     ]
    }
   ],
   "source": [
    "#Remove outliers\n",
    "cols = ['userContributions']\n",
    "Rev = removeOutliers(Rev, colList=cols , lowPercentile=0.00, highPercentile=0.99, verbose=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "4b83d365-091a-45ee-a567-0b96f12555a4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 500x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Graph without outliers for 'userContributions'\n",
    "fig, ax = plt.subplots(figsize=(5, 3))\n",
    "\n",
    "#We will now create a boxplot for 'userContributions'\n",
    "sns.boxplot(data=Rev, x='userContributions', ax=ax, color='#ffcc99')\n",
    "ax.set_title('Boxplot of userContributions', fontsize=10)\n",
    "ax.set_xlabel('')  #Remove the x-axis label\n",
    "plt.tight_layout()  #Better fit\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "cf267a67-b64c-41f8-a0a3-226e0753ff8a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "globalRating          4.807197\n",
       "positionOnRanking    28.036239\n",
       "sitesOnRanking        2.044292\n",
       "totalReviews          3.216711\n",
       "userContributions    28.036665\n",
       "reviewRating          5.884884\n",
       "dtype: float64"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Select only numeric columns for calculating kurtosis\n",
    "numeric_cols = Rev.select_dtypes(include=['float64', 'int64', 'float32', 'int32'])\n",
    "kurtosis_values = numeric_cols.kurtosis()\n",
    "kurtosis_values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "95b644d0-04a3-417b-b2d3-fa2a68152bf2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "globalRating        -0.392838\n",
       "positionOnRanking    4.083031\n",
       "sitesOnRanking       1.564449\n",
       "totalReviews         2.027988\n",
       "userContributions    4.757055\n",
       "reviewRating        -2.317664\n",
       "dtype: float64"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "skewness_values = numeric_cols.skew()\n",
    "skewness_values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "6a4f51cb-f500-4454-8a12-8394dcfa0209",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "12.004331449355218"
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Kurtosis of mean\n",
    "kurtosis_values.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "b01a9985-84c0-4cb5-b7e5-ac9d32c1e9f5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "           userContributions\n",
      "ReviewsID                   \n",
      "1                   3.401197\n",
      "2                   2.079442\n",
      "3                   5.594711\n",
      "4                   2.079442\n",
      "5                   6.248043\n"
     ]
    }
   ],
   "source": [
    "#Add 1 to avoid log(0) which is undefined and directly update the column\n",
    "Rev['userContributions'] = np.log(Rev['userContributions'] + 1)\n",
    "\n",
    "#Display the first few rows of the DataFrame to verify the transformation\n",
    "print(Rev[['userContributions']].head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "8778bedc-fe22-4f42-98db-7b34c6f96270",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 600x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Select only numerical columns for correlation matrix\n",
    "numeric_col_names = numeric_cols.columns\n",
    "corr = Rev[numeric_col_names].corr()\n",
    "\n",
    "#Plot the heatmap\n",
    "figure = plt.figure(figsize=(6, 4))\n",
    "plt.title('Correlation Matrix', fontsize=30)\n",
    "sns.heatmap(data=corr, annot=True, fmt='.1g', cmap='Blues')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "id": "4cbb9f52-67c5-4a95-a63a-3d94dad115f2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>LocalID</th>\n",
       "      <th>extractionDate</th>\n",
       "      <th>globalRating</th>\n",
       "      <th>positionOnRanking</th>\n",
       "      <th>sitesOnRanking</th>\n",
       "      <th>totalReviews</th>\n",
       "      <th>userName</th>\n",
       "      <th>userLocation</th>\n",
       "      <th>userContributions</th>\n",
       "      <th>tripType</th>\n",
       "      <th>reviewWritten</th>\n",
       "      <th>reviewVisited</th>\n",
       "      <th>reviewRating</th>\n",
       "      <th>reviewLanguage</th>\n",
       "      <th>reviewFullText</th>\n",
       "      <th>is_review_before_visit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ReviewsID</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>MAG001</td>\n",
       "      <td>2021-08-20 08:24:40.077</td>\n",
       "      <td>4.5</td>\n",
       "      <td>1</td>\n",
       "      <td>1186</td>\n",
       "      <td>163828</td>\n",
       "      <td>Maurice M@MauriceM171</td>\n",
       "      <td>Indianapolis, IN</td>\n",
       "      <td>3.401197</td>\n",
       "      <td>Couples</td>\n",
       "      <td>2021-08-18</td>\n",
       "      <td>2021-08-01</td>\n",
       "      <td>5</td>\n",
       "      <td>en</td>\n",
       "      <td>Absolutely breathtaking use of light, an amazi...</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>MAG001</td>\n",
       "      <td>2021-08-20 08:24:40.097</td>\n",
       "      <td>4.5</td>\n",
       "      <td>1</td>\n",
       "      <td>1186</td>\n",
       "      <td>163828</td>\n",
       "      <td>nickchamb@nickchamb</td>\n",
       "      <td>Bandon, Ireland</td>\n",
       "      <td>2.079442</td>\n",
       "      <td>Couples</td>\n",
       "      <td>2021-08-17</td>\n",
       "      <td>2021-03-01</td>\n",
       "      <td>5</td>\n",
       "      <td>en</td>\n",
       "      <td>A really interesting and beautiful place to vi...</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>MAG001</td>\n",
       "      <td>2021-08-20 08:24:40.117</td>\n",
       "      <td>4.5</td>\n",
       "      <td>1</td>\n",
       "      <td>1186</td>\n",
       "      <td>163828</td>\n",
       "      <td>Arthur Villon@arthur4588</td>\n",
       "      <td>Valencia, Spain</td>\n",
       "      <td>5.594711</td>\n",
       "      <td>Friends</td>\n",
       "      <td>2021-08-16</td>\n",
       "      <td>2021-08-01</td>\n",
       "      <td>5</td>\n",
       "      <td>en</td>\n",
       "      <td>Beautiful place and must visit place in barcel...</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>MAG001</td>\n",
       "      <td>2021-08-20 08:24:40.147</td>\n",
       "      <td>4.5</td>\n",
       "      <td>1</td>\n",
       "      <td>1186</td>\n",
       "      <td>163828</td>\n",
       "      <td>James U@696jamesu</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>2.079442</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>2021-08-16</td>\n",
       "      <td>2021-07-01</td>\n",
       "      <td>5</td>\n",
       "      <td>en</td>\n",
       "      <td>A MUST when visiting Barcelkona.  It is consta...</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>MAG001</td>\n",
       "      <td>2021-08-20 08:24:40.159</td>\n",
       "      <td>4.5</td>\n",
       "      <td>1</td>\n",
       "      <td>1186</td>\n",
       "      <td>163828</td>\n",
       "      <td>Kamal K Sirra@Sirra63</td>\n",
       "      <td>Madrid, Spain</td>\n",
       "      <td>6.248043</td>\n",
       "      <td>Family</td>\n",
       "      <td>2021-08-15</td>\n",
       "      <td>2021-07-01</td>\n",
       "      <td>4</td>\n",
       "      <td>en</td>\n",
       "      <td>I visited about 20 years ago and there has bee...</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          LocalID          extractionDate  globalRating  positionOnRanking  \\\n",
       "ReviewsID                                                                    \n",
       "1          MAG001 2021-08-20 08:24:40.077           4.5                  1   \n",
       "2          MAG001 2021-08-20 08:24:40.097           4.5                  1   \n",
       "3          MAG001 2021-08-20 08:24:40.117           4.5                  1   \n",
       "4          MAG001 2021-08-20 08:24:40.147           4.5                  1   \n",
       "5          MAG001 2021-08-20 08:24:40.159           4.5                  1   \n",
       "\n",
       "           sitesOnRanking  totalReviews                  userName  \\\n",
       "ReviewsID                                                           \n",
       "1                    1186        163828     Maurice M@MauriceM171   \n",
       "2                    1186        163828       nickchamb@nickchamb   \n",
       "3                    1186        163828  Arthur Villon@arthur4588   \n",
       "4                    1186        163828         James U@696jamesu   \n",
       "5                    1186        163828     Kamal K Sirra@Sirra63   \n",
       "\n",
       "               userLocation  userContributions tripType reviewWritten  \\\n",
       "ReviewsID                                                               \n",
       "1          Indianapolis, IN           3.401197  Couples    2021-08-18   \n",
       "2           Bandon, Ireland           2.079442  Couples    2021-08-17   \n",
       "3           Valencia, Spain           5.594711  Friends    2021-08-16   \n",
       "4                   Unknown           2.079442  Unknown    2021-08-16   \n",
       "5             Madrid, Spain           6.248043   Family    2021-08-15   \n",
       "\n",
       "          reviewVisited  reviewRating reviewLanguage  \\\n",
       "ReviewsID                                              \n",
       "1            2021-08-01             5             en   \n",
       "2            2021-03-01             5             en   \n",
       "3            2021-08-01             5             en   \n",
       "4            2021-07-01             5             en   \n",
       "5            2021-07-01             4             en   \n",
       "\n",
       "                                              reviewFullText  \\\n",
       "ReviewsID                                                      \n",
       "1          Absolutely breathtaking use of light, an amazi...   \n",
       "2          A really interesting and beautiful place to vi...   \n",
       "3          Beautiful place and must visit place in barcel...   \n",
       "4          A MUST when visiting Barcelkona.  It is consta...   \n",
       "5          I visited about 20 years ago and there has bee...   \n",
       "\n",
       "           is_review_before_visit  \n",
       "ReviewsID                          \n",
       "1                           False  \n",
       "2                           False  \n",
       "3                           False  \n",
       "4                           False  \n",
       "5                           False  "
      ]
     },
     "execution_count": 102,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Check\n",
    "Rev.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "bb5cf112-d4af-4ec6-a40d-041a2ccbbe2a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 6 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Selecting the numeric columns\n",
    "numerical = Rev.select_dtypes(include=[np.number]).columns.tolist()\n",
    "\n",
    "#we are gonna check if there are any numeric columns\n",
    "if numerical:\n",
    "    #Determine the layout for subplots\n",
    "    num_vars = len(numerical)\n",
    "    num_cols = 3\n",
    "    num_rows = num_vars // num_cols if num_vars % num_cols == 0 else (num_vars // num_cols) + 1\n",
    "\n",
    "    #Create subplots\n",
    "    fig, ax = plt.subplots(num_rows, num_cols, figsize=(10, num_rows * 3))\n",
    "    ax = ax.flatten()  # Flatten the array for easy iteration\n",
    "\n",
    "    #Plot histograms\n",
    "    for i, var in enumerate(numerical):\n",
    "        ax[i].hist(Rev[var], bins=20)\n",
    "        ax[i].set_title(var)\n",
    "\n",
    "    #Turn off axes for any empty subplots\n",
    "    for i in range(num_vars, len(ax)):\n",
    "        ax[i].axis('off')\n",
    "\n",
    "    #Decoration\n",
    "    plt.rc('axes', labelsize=12)  # Adjust labelsize as needed\n",
    "    fig.suptitle(\"Histograms of all numeric variables\", fontsize=16)\n",
    "\n",
    "    #Show the plots\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "id": "5d19e094-c8c4-4dd4-a62f-e0d871294a1a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "           userCountry\n",
      "ReviewsID             \n",
      "1                   IN\n",
      "2              Ireland\n",
      "3                Spain\n",
      "4              Unknown\n",
      "5                Spain\n",
      "...                ...\n",
      "92116               UK\n",
      "92117      Switzerland\n",
      "92118               CA\n",
      "92119           Canada\n",
      "92120               MA\n",
      "\n",
      "[90473 rows x 1 columns]\n"
     ]
    }
   ],
   "source": [
    "# Extract the country from the 'userLocation' column and store it in a new column called 'userCountry'.\n",
    "Rev['userCountry'] = Rev['userLocation'].apply(lambda x: x.split(', ')[-1])\n",
    "\n",
    "#Display the result\n",
    "print(Rev[['userCountry']])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "7a390bc7-1fdc-42a0-8725-f2122da81c85",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "           userCountry\n",
      "ReviewsID             \n",
      "1                  USA\n",
      "2              Ireland\n",
      "3                Spain\n",
      "4              Unknown\n",
      "5                Spain\n",
      "...                ...\n",
      "92116               UK\n",
      "92117      Switzerland\n",
      "92118              USA\n",
      "92119           Canada\n",
      "92120           Brazil\n",
      "\n",
      "[90473 rows x 1 columns]\n"
     ]
    }
   ],
   "source": [
    "# Define a dictionary with the values to be replaced and their corresponding replacements \n",
    "# This values have been generated by \"ChatGPT\"\n",
    "replacement_dict = {\"AL\": \"USA\", \"AK\": \"USA\", \"AZ\": \"USA\", \"AR\": \"USA\", \"CA\": \"USA\",\n",
    "    \"CO\": \"USA\", \"CT\": \"USA\", \"DE\": \"USA\", \"FL\": \"USA\", \"GA\": \"USA\",\n",
    "    \"HI\": \"USA\", \"ID\": \"USA\", \"IL\": \"USA\", \"IN\": \"USA\", \"IA\": \"USA\",\n",
    "    \"KS\": \"USA\", \"KY\": \"USA\", \"LA\": \"USA\", \"ME\": \"USA\", \"MD\": \"USA\",\n",
    "    \"MA\": \"USA\", \"MI\": \"USA\", \"MN\": \"USA\", \"MS\": \"USA\", \"MO\": \"USA\",\n",
    "    \"MT\": \"USA\", \"NE\": \"USA\", \"NV\": \"USA\", \"NH\": \"USA\", \"NJ\": \"USA\",\n",
    "    \"NM\": \"USA\", \"NY\": \"USA\", \"NC\": \"USA\", \"ND\": \"USA\", \"OH\": \"USA\",\n",
    "    \"OK\": \"USA\", \"OR\": \"USA\", \"PA\": \"USA\", \"RI\": \"USA\", \"SC\": \"USA\",\n",
    "    \"SD\": \"USA\", \"TN\": \"USA\", \"TX\": \"USA\", \"UT\": \"USA\", \"VT\": \"USA\",\n",
    "    \"VA\": \"USA\", \"WA\": \"USA\", \"WV\": \"USA\", \"WI\": \"USA\", \"WY\": \"USA\", \"AC\": \"Brazil\", \"AL_BR\": \"Brazil\", \"AP\": \"Brazil\", \"AM\": \"Brazil\", \"BA\": \"Brazil\",\n",
    "    \"CE\": \"Brazil\", \"DF\": \"Brazil\", \"ES\": \"Brazil\", \"GO\": \"Brazil\", \"MA\": \"Brazil\",\n",
    "    \"MT\": \"Brazil\", \"MS\": \"Brazil\", \"MG\": \"Brazil\", \"PA\": \"Brazil\", \"PB\": \"Brazil\",\n",
    "    \"PR\": \"Brazil\", \"PE\": \"Brazil\", \"PI\": \"Brazil\", \"RJ\": \"Brazil\", \"RN\": \"Brazil\",\n",
    "    \"RS\": \"Brazil\", \"RO\": \"Brazil\", \"RR\": \"Brazil\", \"SC_BR\": \"Brazil\", \"SP\": \"Brazil\",\n",
    "    \"SE\": \"Brazil\", \"TO\": \"Brazil\",\"United States\":\"USA\",\"usa\":\"USA\",\"uk\":\"UK\",\"england\":\"UK\",\"England\":\"UK\",\"London\":\"UK\",\n",
    "    \"California\":\"USA\",\"california\":\"USA\",\"New York\":\"USA\",\"Sydney\":\"Australia\",\"Chicago\":\"USA\",\"Melbourne\":\"Australia\",\n",
    "    \"Dallas\":\"USA\",\"Atlanta\":\"USA\",\"San Francisco\":\"USA\",\"Toronto\":\"Canada\",\"toronto\":\"Canada\",\"canada\":\"Canada\",\n",
    "    \"Houston\":\"USA\",\"Vancouver\":\"Canada\",\"Boston\":\"USA\",\"Seattle\":\"USA\",\"Paris\":\"France\",\"Amsterdam\":\"The Netherlands\",\n",
    "    \"Moscow\":\"Russia\",\"Bristol\":\"UK\",\"San Diego\":\"USA\",\"Pune\":\"India\",\"Budapest\":\"Hungary\",\n",
    "    \"Ontario\": \"Canada\", \"CuraÃ§ao\": \"CuraÃ§ao\",\n",
    "    \"NYC\": \"USA\", \"manchester\": \"UK\", \"Essex\": \"UK\", \"scotland\": \"UK\", \"ireland\": \"Ireland\",\n",
    "    \"new york\": \"USA\", \"california\": \"USA\", \"texas\": \"USA\", \"london\": \"UK\", \"Georgia\": \"USA\", \"Belarus\": \"Belarus\",\n",
    "    \"Namibia\": \"Namibia\", \"essex\": \"UK\", \"California\": \"USA\",\n",
    "    \"Midlands\": \"UK\", \"NSW AUSTRALIA\": \"Australia\", \"Australia\": \"Australia\", \"Philippines\": \"Philippines\", \"israel\": \"Israel\",\n",
    "    \"Cork\": \"Ireland\", \"Cumbria\": \"UK\", \"Orange\": \"USA\", \"Dubai\": \"United Arab Emirates\", \"Warwickshire\": \"UK\", \"Victoria\": \"Australia\", \"glasgow\": \"UK\", \"Ethiopia\": \"Ethiopia\",\n",
    "    \"Jakarta\": \"Indonesia\", \"Derby\": \"UK\", \"leeds\": \"UK\", \"NORTH LAS VEGAS\": \"USA\", \"Edmonton\": \"Canada\", \"Manitou Springs CO\": \"USA\", \"Fort Worth\": \"USA\", \"Newcastle upon Tyne\": \"UK\", \"S. Wales\": \"UK\", \"cork\": \"Ireland\", \"bristol\": \"UK\",\n",
    "    \"Brighton\": \"UK\", \"West Yorkshire\": \"UK\", \"North Wales\": \"UK\", \"L.A.\": \"USA\", \"Delaware\": \"USA\", \"west yorkshire\": \"UK\", \"Hawaii\": \"USA\", \"Bath\": \"UK\",\"Lincolnshire\": \"UK\",\n",
    "    \"United Kingdom\":\"UK\",\"Uk\":\"UK\",\n",
    "    \"Quebec\":\"Canada\", \"BC\":\"Canada\", \"New Providence Island\":\"The Bahamas\", \"Auckland\":\"New Zealand\", \"Bermuda\":\"UK\", \"Herts\":\"UK\", \"Tanzania\":\"Tanzania\", \"Grand Cayman\":\"UK\", \"Gibraltar\":\"UK\",\n",
    "    \"DC\":\"USA\",\"New Jersey\":\"USA\",\"Florida\":\"USA\",\"Texas\":\"USA\",\"Virginia\":\"USA\",\"Colorado\":\"USA\",\"Maryland\":\"USA\",\n",
    "    \"Kent\":\"UK\",\"Scotland\":\"UK\",\"North Carolina\":\"USA\",\"Michigan\":\"USA\",\"Wisconsin\":\"USA\",\"Illinois\":\"USA\",\n",
    "    \"Pennsylvania\":\"USA\",\"Massachusetts\":\"USA\",\"Ohio\":\"USA\",\"Connecticut\":\"USA\",\"Arizona\":\"USA\",\"Minnesota\":\"USA\",\"Manchester\":\"UK\"}\n",
    "\n",
    "#Use the replace method to substitute values\n",
    "Rev[\"userCountry\"] = Rev[\"userCountry\"].replace(replacement_dict)\n",
    "\n",
    "print(Rev[['userCountry']])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "236b7c97-48c1-458a-af1d-bb4305d31004",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "List of values with count >= 20 in the column userCountry:\n",
      "        Value  Count\n",
      "0          UK  28082\n",
      "1         USA  17555\n",
      "2     Unknown  13328\n",
      "3   Australia   4118\n",
      "4      Canada   3173\n",
      "..        ...    ...\n",
      "80      Wales     21\n",
      "81    Ecuador     21\n",
      "82       Peru     21\n",
      "83    Morocco     20\n",
      "84       Iraq     20\n",
      "\n",
      "[85 rows x 2 columns]\n"
     ]
    }
   ],
   "source": [
    "#Replace 'userCountry' with the actual column name\n",
    "value_counts = Rev[\"userCountry\"].value_counts()\n",
    "\n",
    "# Set a minimum threshold of 20 for 'userCountry' values, considering it as the most relevant for our project.\n",
    "# Invalid values will remain as they may still hold relevance, but the threshold applies specifically to 'userCountry'.\n",
    "min_threshold = 20\n",
    "\n",
    "#Filter values based on the threshold\n",
    "filtered_values = value_counts[value_counts >= min_threshold]\n",
    "userCountry_df = pd.DataFrame({'Value': filtered_values.index, 'Count': filtered_values.values})\n",
    "print(f\"List of values with count >= {min_threshold} in the column userCountry:\")\n",
    "print(userCountry_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "id": "6305a1cb-7f1a-4e11-b9bc-67bae516ba76",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Count of 1s in Spring: 22615\n",
      "Count of 1s in Summer: 27509\n",
      "Count of 1s in Autumn: 22637\n",
      "Count of 1s in Winter: 17712\n"
     ]
    }
   ],
   "source": [
    "#Extract month from the 'reviewVisited' column\n",
    "Rev['month'] = Rev['reviewVisited'].dt.month\n",
    "\n",
    "#Define a function to map months to seasons\n",
    "def get_season(month):\n",
    "    if 3 <= month <= 5:\n",
    "        return 'Spring'\n",
    "    elif 6 <= month <= 8:\n",
    "        return 'Summer'\n",
    "    elif 9 <= month <= 11:\n",
    "        return 'Autumn'\n",
    "    else:\n",
    "        return 'Winter'\n",
    "\n",
    "#Create new variables for each season\n",
    "Rev['spring'] = Rev['month'].apply(lambda x: 1 if get_season(x) == 'Spring' else 0)\n",
    "Rev['summer'] = Rev['month'].apply(lambda x: 1 if get_season(x) == 'Summer' else 0)\n",
    "Rev['autumn'] = Rev['month'].apply(lambda x: 1 if get_season(x) == 'Autumn' else 0)\n",
    "Rev['winter'] = Rev['month'].apply(lambda x: 1 if get_season(x) == 'Winter' else 0)\n",
    "\n",
    "#Drop the 'month' column if you no longer need it\n",
    "Rev = Rev.drop('month', axis=1)\n",
    "\n",
    "#Count the number of 1s in each season\n",
    "count_spring = Rev['spring'].sum()\n",
    "count_summer = Rev['summer'].sum()\n",
    "count_autumn = Rev['autumn'].sum()\n",
    "count_winter = Rev['winter'].sum()\n",
    "\n",
    "print(f\"Count of 1s in Spring: {count_spring}\")\n",
    "print(f\"Count of 1s in Summer: {count_summer}\")\n",
    "print(f\"Count of 1s in Autumn: {count_autumn}\")\n",
    "print(f\"Count of 1s in Winter: {count_winter}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "01ffb00d-8104-430d-800a-ee7216c2f375",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
